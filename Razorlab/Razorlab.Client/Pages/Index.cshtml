@page "/"
@using Razorlab.Client.JsInterop
@using Razorlab.Client.Pages
@using Razorlab.Shared
@inject HttpClient Http

<div class="header-row">
    <div class="header px-4">
        <span class="title">Razorlab</span>
    </div>
    <ParserOptions DesignTime=@_designTime TagHelperPhase=@_tagHelperPhase Trigger=@OptionsChanged></ParserOptions>
</div>

<div class="content px-4">
    <div class="source-container content-box mx-2 my-2">
        <textarea id="source" value=@InitialContent></textarea>
    </div>
    <div class="intermediate-container content-box mx-2 my-2">
        <Tree bind-Root=@_intermediateRoot />
    </div>
    <div class="generated-code-container content-box mx-2 my-2">
        <pre>@_generatedCode?.Code</pre>
    </div>
    <div class="content-box mx-2 my-2">
        <Tree bind-Root=@_syntaxTreeRoot />
    </div>
    <div class="content-box mx-2 my-2">
        <Tree bind-Root=@_legacySyntaxTreeRoot />
    </div>
</div>


@functions {

    private const string InitialContent = @"@addTagHelper *, TestAssembly
@{
    var foo = ""Hello World!"";
}

<p foo=""123"" bar='@foo'>Content</p>";
    private GeneratedCodeResult _generatedCode;
    private Node _intermediateRoot;
    private Node _syntaxTreeRoot;
    private Node _legacySyntaxTreeRoot;
    private bool _designTime;
    private bool _tagHelperPhase;
    private string _source;
    private bool _rendered;

    protected override async Task OnAfterRenderAsync()
    {
        if (!_rendered)
        {
            await RazorlabJs.InitializeCodeMirror("#source", this);
            await SourceChanged();
            _rendered = true;
        }
    }

    private Input GetInput()
    {
        return new Input
        {
            Content = _source,
            DesignTime = _designTime,
            TagHelperPhase = _tagHelperPhase,
        };
    }

    private async Task OptionsChanged(bool designTime, bool tagHelperPhase)
    {
        _designTime = designTime;
        _tagHelperPhase = tagHelperPhase;
        await Update();
    }

    private async Task Update()
    {
        var input = GetInput();
        var result = await Http.PostJsonAsync<ParseResult>("/api/Parse", input);
        _syntaxTreeRoot = result.SyntaxTreeRoot;
        _legacySyntaxTreeRoot = result.LegacySyntaxTreeRoot;
        _intermediateRoot = result.IntermediateRoot;
        _generatedCode = result.GeneratedCode;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SourceChanged()
    {
        var currentValue = await RazorlabJs.GetElementValue("#source");
        if (currentValue == _source)
        {
            // Nothing changed
            return;
        }

        _source = currentValue;

        await Update();
    }
}